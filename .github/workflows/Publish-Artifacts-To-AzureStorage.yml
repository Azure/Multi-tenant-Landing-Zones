name: Production - Verify and publish artifacts to Azure Storage
on:
  #push:
  #  branches: 
  #    - main
  #    - fabrikam*
  
  pull_request:
    types: [closed]
    branches:
      - master
    paths:
      - src/platform-automation/artifacts/**

defaults: 
  run:
    shell: pwsh

env:
  storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_PROD }}
  storageAccountKey: ${{ secrets. AZURE_DEPLOYMENT_STORAGE_SAS_PROD }}
  artifactsVersion: "1.0"
  artifactsSrcFolder: ./src/platform-automation/artifacts  
  deploymentAutomationCredential: ${{ secrets.AZURE_SUBSCRIPTION_CREDENTIAL }}

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    # strategy:
      # matrix:
      #   artifacts: ['blueprints','dsc','scripts','workbooks','templates']
    
      # fail-fast: true
    if: github.event.pull_request.merged == true
    steps:    
    - name: Checkout
      uses: actions/checkout@v1       

    - name: Install modules
      run: ./src/platform-automation/platform-scripts/Install-Required-Modules.ps1 -verbose  

    - name: Azure Login
      uses: Azure/login@v1
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{env.customerDeploymentCredential}} 
        enable-AzPSSession: true 

    - name: Prepare for artifact upload
      run: |
        Write-Output 'StorageAccount : ${{ env.storageAccountName }} Preparing artifacts and uploading artifacts from ${{ env.artifactsSrcPath }}'

    - name: Run upload artifacts script
      run: ./src/platform-automation/platform-scripts/Upload-Artifacts.ps1 -storageAccountName '${{ env.storageAccountName }}' -storageAccountKey '${{ env.storageAccountKey }}' -version '${{ env.artifactsVersion }}' -artifactsPath '${{ env.artifactsSrcFolder }}' -verbose
    
